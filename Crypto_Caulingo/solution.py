# import gmpy2

# N = 17450892350509567071590987572582143158927907441748820483575144211411640241849663641180283816984167447652133133054833591585389505754635416604577584488321462013117163124742030681698693455489404696371546386866372290759608301392572928615767980244699473803730080008332364994345680261823712464595329369719516212105135055607592676087287980208987076052877442747436020751549591608244950255761481664468992126299001817410516694015560044888704699389291971764957871922598761298482950811618390145762835363357354812871474680543182075024126064364949000115542650091904557502192704672930197172086048687333172564520657739528469975770627;

# for A in range(600, 1001):
# 	print(A)
# 	for B in range(600, 1001):
# 		p = gmpy2.isqrt(B*N // A)
# 		for eps in range(-10, 11):
# 			cp = p + eps;
# 			if N % cp == 0:
# 				print("p ", cp)
# 				print("q ", N // cp)
# 				exit()

p = 151086174643947302290817794140091756798645765602409645643205831091644137498519425104335688550286307690830177161800083588667379385673705979813357923016141205953591742544325170678167010991535747769057335224460619777264606691069942245683132083955765987513089646708001710658474178826337742596489996782669571549253

q = 115502906812186413716028212900548735990904256575141882752425616464266991765240920703188618324966988373216520827723741484031611192826120314542453727041306942082909556327966471790487878679927202639569020757238786152140574636623998668929044300958627146625246115304479897191050159379832505990011874114710868929959

e = 65537

c = 0x50fb0b3f17315f7dfa25378fa0b06c8d955fad0493365669bbaa524688128ee9099ab713a3369a5844bdd99a5db98f333ef55159d3025630c869216889be03120e3a4bd6553d7111c089220086092bcffc5e42f1004f9888f25892a7ca007e8ac6de9463da46f71af4c8a8f806bee92bf79a8121a7a34c3d564ac7f11b224dc090d97fdb427c10867ad177ec35525b513e40bef3b2ba3e6c97cb31d4fe3a6231fdb15643b84a1ce704838d8b99e5b0737e1fd30a9cc51786dcac07dcb9c0161fc754cda5380fdf3147eb4fbe49bc9821a0bcad98d6df9fbdf63cf7d7a5e4f6cbea4b683dfa965d0bd51f792047e393ddd7b7d99931c3ed1d033cebc91968d43f

n = p * q

def __egcd(a, b):
	if a == 0:
		return (b, 0, 1)
	else:
		g, y, x = __egcd(b % a, a)
		return (g, x - (b // a) * y, y)

def __modinv(a, m):
	g, x, y = __egcd(a, m)
	if g != 1:
		raise Exception('modular inverse does not exist')
	else:
		return x % m

d = __modinv(e, (p-1) * (q-1));

print(pow(c, d, n)) 


# >>> hex(104912827573566800811792441468210356569964878941709929674300189102866837244319126508967213713176999043753315327673696178416555114871848972110841567269934327209009016038658577602592076082926719827659845600484620640902814627018148847912681580323274216081883015583308575491951453684632140040837762243945655335077521930323814749118928646156571818218979625932255611934066038337552900781554179232797426648810906488976286100790347894881474627386490922922277671986478682556380522883191417867038656653208496600761919031503605106027151030276009402402468110389402729021223752173872446730)[2:-1].decode('hex') 
# 'Hey there!\n\nIf you are able to decrypt this message, you must a life form with high intelligence!\n\nTherefore, we would like to invite you to our dancing party! \n\nHere\xe2\x80\x99s your invitation code: CTF{017d72f0b513e89830bccf5a36306ad944085a47}\n'
